{
  "version": 3,
  "sources": ["../src/PixelFontFace.ts", "../src/loaders/assetLoader.ts"],
  "sourcesContent": ["import { NearestFilter, Texture } from 'three'\nimport { loadText, loadTexture } from './loaders/assetLoader'\n\nfunction url(path: string, ext: string) {\n  return `${path}.${ext}`\n}\nexport default class PixelFontFace {\n  font?: string\n  pixelWidths?: number[]\n  texture?: Texture\n  private _initd = false\n  constructor(\n    public name: string,\n    public maxCharPixelWidth = 7,\n    public charPixelHeight = 8\n  ) {}\n  async init() {\n    if (this._initd) {\n      return\n    }\n    this._initd = true\n\n    this.texture = await loadTexture(url(this.name, 'png'))\n    this.texture.minFilter = NearestFilter\n    this.texture.magFilter = NearestFilter\n\n    const pixelWidthsString = (\n      await loadText(url(this.name + '_char-widths', 'txt'))\n    )\n      .split('\\n')\n      .join('')\n    const pixelWidths = []\n    for (let i = 0; i < pixelWidthsString.length; i++) {\n      pixelWidths[i] = parseInt(pixelWidthsString[i])\n    }\n    this.pixelWidths = pixelWidths\n    this.font = (await loadText(url(this.name, 'txt'))).split('\\n').join('')\n  }\n}\n\nexport const pixelFontFaces = {\n  cdogs_font_7x8: new PixelFontFace('pixelFonts/cdogs_font_7x8', 7, 8),\n  good_neighbors: new PixelFontFace('pixelFonts/good_neighbors', 11, 16)\n}\n", "import { FileLoader, LoadingManager, Texture, TextureLoader } from 'three'\n\nconst __loadingManager = new LoadingManager()\n\nlet __fileLoader: FileLoader | undefined\nfunction getFileLoader() {\n  if (!__fileLoader) {\n    __fileLoader = new FileLoader(__loadingManager)\n  }\n  return __fileLoader\n}\n\nlet __textureLoader: TextureLoader | undefined\nfunction getTextureLoader() {\n  if (!__textureLoader) {\n    __textureLoader = new TextureLoader(__loadingManager)\n  }\n  return __textureLoader\n}\n\nexport async function loadJson(url: string): Promise<object> {\n  return new Promise<object>((resolve, reject) =>\n    getFileLoader().load(\n      url,\n      (fileContents: any) => resolve(JSON.parse(fileContents)),\n      undefined,\n      reject\n    )\n  )\n}\n\nexport async function loadText(url: string): Promise<string> {\n  return new Promise<string>((resolve, reject) =>\n    getFileLoader().load(\n      url,\n      (fileContents: any) => resolve(fileContents),\n      undefined,\n      reject\n    )\n  )\n}\n\nconst __currentlyLoadingTextureResolvers = new Map<\n  string,\n  Array<(texture: Texture) => void>\n>()\nexport async function loadTexture(\n  url: string,\n  flipY?: boolean\n): Promise<Texture> {\n  let promise: Promise<Texture>\n  if (__currentlyLoadingTextureResolvers.has(url)) {\n    promise = new Promise<Texture>((resolve, reject) => {\n      __currentlyLoadingTextureResolvers.get(url)!.push(resolve)\n    })\n  } else {\n    promise = new Promise<Texture>((resolve, reject) => {\n      __currentlyLoadingTextureResolvers.set(url, [resolve])\n      const onLoad = (texture: Texture) => {\n        // texture.needsUpdate = true\n        texture.name = url\n        // texture.encoding = sRGBEncoding\n        if (flipY !== undefined) {\n          texture.flipY = flipY\n        }\n        // XXX Using this filter to get rid of NPOT warnings, is not best quality fix later\n        // texture.minFilter = NearestFilter\n        // texture.magFilter = NearestFilter\n        __currentlyLoadingTextureResolvers\n          .get(url)!\n          .forEach((resolve) => resolve(texture))\n        __currentlyLoadingTextureResolvers.delete(url)\n      }\n      getTextureLoader().load(url, onLoad, undefined, reject)\n    })\n  }\n  return promise\n}\n"],
  "mappings": ";AAAA;;;ACAA;AAEA,IAAM,mBAAmB,IAAI,eAAe;AAE5C,IAAI;AACJ,yBAAyB;AACvB,MAAI,CAAC,cAAc;AACjB,mBAAe,IAAI,WAAW,gBAAgB;AAAA,EAChD;AACA,SAAO;AACT;AAEA,IAAI;AACJ,4BAA4B;AAC1B,MAAI,CAAC,iBAAiB;AACpB,sBAAkB,IAAI,cAAc,gBAAgB;AAAA,EACtD;AACA,SAAO;AACT;AAaA,wBAA+B,MAA8B;AAC3D,SAAO,IAAI,QAAgB,CAAC,SAAS,WACnC,cAAc,EAAE,KACd,MACA,CAAC,iBAAsB,QAAQ,YAAY,GAC3C,QACA,MACF,CACF;AACF;AAEA,IAAM,qCAAqC,oBAAI,IAG7C;AACF,2BACE,MACA,OACkB;AAClB,MAAI;AACJ,MAAI,mCAAmC,IAAI,IAAG,GAAG;AAC/C,cAAU,IAAI,QAAiB,CAAC,SAAS,WAAW;AAClD,yCAAmC,IAAI,IAAG,EAAG,KAAK,OAAO;AAAA,IAC3D,CAAC;AAAA,EACH,OAAO;AACL,cAAU,IAAI,QAAiB,CAAC,SAAS,WAAW;AAClD,yCAAmC,IAAI,MAAK,CAAC,OAAO,CAAC;AACrD,YAAM,SAAS,CAAC,YAAqB;AAEnC,gBAAQ,OAAO;AAEf,YAAI,UAAU,QAAW;AACvB,kBAAQ,QAAQ;AAAA,QAClB;AAIA,2CACG,IAAI,IAAG,EACP,QAAQ,CAAC,aAAY,SAAQ,OAAO,CAAC;AACxC,2CAAmC,OAAO,IAAG;AAAA,MAC/C;AACA,uBAAiB,EAAE,KAAK,MAAK,QAAQ,QAAW,MAAM;AAAA,IACxD,CAAC;AAAA,EACH;AACA,SAAO;AACT;;;AD1EA,aAAa,MAAc,KAAa;AACtC,SAAO,GAAG,QAAQ;AACpB;AACA,0BAAmC;AAAA,EAKjC,YACS,MACA,oBAAoB,GACpB,kBAAkB,GACzB;AAHO;AACA;AACA;AAAA,EACN;AAAA,EARH;AAAA,EACA;AAAA,EACA;AAAA,EACQ,SAAS;AAAA,QAMX,OAAO;AACX,QAAI,KAAK,QAAQ;AACf;AAAA,IACF;AACA,SAAK,SAAS;AAEd,SAAK,UAAU,MAAM,YAAY,IAAI,KAAK,MAAM,KAAK,CAAC;AACtD,SAAK,QAAQ,YAAY;AACzB,SAAK,QAAQ,YAAY;AAEzB,UAAM,oBACJ,OAAM,SAAS,IAAI,KAAK,OAAO,gBAAgB,KAAK,CAAC,GAEpD,MAAM,IAAI,EACV,KAAK,EAAE;AACV,UAAM,cAAc,CAAC;AACrB,aAAS,IAAI,GAAG,IAAI,kBAAkB,QAAQ,KAAK;AACjD,kBAAY,KAAK,SAAS,kBAAkB,EAAE;AAAA,IAChD;AACA,SAAK,cAAc;AACnB,SAAK,OAAQ,OAAM,SAAS,IAAI,KAAK,MAAM,KAAK,CAAC,GAAG,MAAM,IAAI,EAAE,KAAK,EAAE;AAAA,EACzE;AACF;AAEO,IAAM,iBAAiB;AAAA,EAC5B,gBAAgB,IAAI,cAAc,6BAA6B,GAAG,CAAC;AAAA,EACnE,gBAAgB,IAAI,cAAc,6BAA6B,IAAI,EAAE;AACvE;",
  "names": []
}
